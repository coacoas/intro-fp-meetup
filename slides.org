#+OPTIONS: num:nil toc:nil reveal_title_slide:nil
#+REVEAL_TRANS: slide
#+REVEAL_THEME: sky
#+REVEAL_PLUGINS: (highlight notes)
#+REVEAL_ROOT: https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.8.0/
#+Title: Introduction to Functional Programming
#+Author: Bill Carlson
#+Email: bill@coacoas.net

* Introduction to Functional Programming

* Inspiration
I've stolen this presentation before, and I'll do it again

[[https://www.youtube.com/watch?v=aAtPi23nLcw][Runar Bjarnasson - Introduction to Functional Programming]]

* Who am I? 
- Bill Carlson
- Senior Software Engineer @ Banno
- I get paid to write purely functional programs
- Proud graduate of the National Champion University of Virginia
#+BEGIN_NOTES
for a few years now!
#+END_NOTES

* What is Functional Programming? 
#+ATTR_REVEAL: :frag t
Programming with functions

** What is a function?
#+ATTR_REVEAL: :frag t
A function ~f :: A -> B~ maps *any* value from A to *exactly one* value in B

#+ATTR_REVEAL: :frag t
/And nothing else/

** What does that mean? 

- Totality :: A function will return a single value for all values of ~A~.
- Determinism :: Every time you call a function with the same arguments, you will /always/ get the same result.
- Purity :: The output of the function is the /only/ effect.


** What does /that/ mean?
A function can not:
- Read/Write to disk
- Print to the console
- Query a database
- Throw an exception
- Check the system clock
- etc.

But we'll touch on that later...

** Referential Tranparency
- You can replace all occurrences of an expression with the result of that call without changing the program.
- A function ~f(a)~ is pure if it is referentially transparent for all referentially transparent values of ~a~

*** Example
#+BEGIN_SRC scala
val string = "some text"
val e1 = string.reverse
val e2 = string.reverse
val e3 = e1 + e2
#+END_SRC

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC scala
val buffer = new StringBuilder("some text")
val n1 = buffer.reverse
val n2 = buffer.reverse
val n3 = n1.append(n2)
#+END_SRC

*** Referential Transparency

- A functional program is not a set of instructions for the computer. 
- It is a single referentially transparent expression.
- Running a program is just a series of reductions to a single value.

* Live Coding
#+BEGIN_NOTES
Since this is a combination of Elixir and Java meetups, with folks
likely being able to read OO-style coding, and most everyone is likely
to be able to at least decipher something like Ruby...
#+END_NOTES

** Haskell
#+BEGIN_NOTES
Why Haskell? Because Haskell is the lingua franca of functional
programming. It is the closest to the lambda calculus that acts as the
theoretical underpinnings of FP.  So, let's take a look...

Remember to ask questions!
#+END_NOTES

*** Function calls
#+begin_src haskell
-- type declaration
inc :: Integer -> Integer
^      ^          ^
name   param      return    

-- expression declaration
inc   x   =   x + 1
^     ^       ^
name  param   expression (implicit return)

#+end_src

*** Multiple parameters
#+begin_src haskell
-- type declaration
add :: Integer -> Integer -> Integer
^      ^          ^          ^
name   param      param      return

-- expression declaration
inc   x      y       =   x + y
      ^      ^           ^
name  param  param       expression

#+end_src

*** Calling functions
#+begin_src haskell
-- Calling with all known parameters
x = add 2 3 -- x == 5

-- Curried functions
addTwo :: Integer -> Integer
addTwo = add 2

y = addTwo 3 -- y == 3
#+end_src

*** Lambdas
#+begin_src haskell
inc :: Int -> Int

inc = \x -> x + 1
#+end_src

#+BEGIN_NOTES
First, let's look at how to build a type

data Bool = True | False

And then define a quick function (note pattern matching)

not :: Bool -> Bool
not True = False
not False = True

even :: Integer -> Bool
even n = mod n 2 == 0

-- Return true if the second integer is divisible by the first integer
divisibleBy :: Integer -> Integer -> Bool
divisibleBy k n = mod n k == 0
divisibleBy' k = \n -> mod n k == 0
-- divisibleBy'' k = (== 0) . flip (mod)

even' = divisibleBy 2
-- Function composition: (f ∘ g)(x) == f(g(x))
-- f :: b -> c ; g :: a -> b ; (f ∘ g) :: a -> c
-- :t (.)
odd   = not . even'
#+END_NOTEs

*** Higher-order functions

- Functions are values
- Values can be passed to or returned from functions
- Ergo, functions can accept and return functions

#+BEGIN_NOTES
-- Lifting
and :: Pred a -> Pred a -> Pred a
and p1 p2 = \a -> (p1 a) && (p2 a)
or :: Pred a -> Pred a -> Pred a
or p1 p2 = \a -> (p1 a) || (p2 a)
-- Copy/paste is awful - let's try to abstract
lift :: (Bool -> Bool -> Bool) -- f
     -> Pred a -- b1
     -> Pred a -- b2
     -> Pred a -- result
lift f b1 b2 = \a -> f (b1 a) (b2 a)

and' :: Pred a -> Pred a -> Pred a
and' = lift (&&)

or' :: Pred a -> Pred a -> Pred a
or' = lift (||)

#+END_NOTES

* Data Structures

*** List

#+begin_src haskell
data List a = Nil | Cons a (List a)
#+end_src

#+ATTR_REVEAL: :frag t
#+begin_src haskell
data [a] = [] | a : [a]
#+end_src

*** List

- Build a large list by prepending to a smaller list
#+begin_src haskell
small_list = [4, 3, 2, 1]
bigger_list = 8 : 7 : 6 : 5 : small_list
#+end_src
- This does not change the value of ~small_list~
- This /shares/ the space used by ~small_list~ 

*** Reduction

- Building lists is all well and good, but how can we get an actual value out of it? 
- Let's look at summing a list of ~Integer~ values
- MORE CODE!!

#+BEGIN_NOTES
--
-- Lists
-- 
sum :: [Integer] -> Integer
sum [] = 0
sum (x:xs) = x + sum xs

product :: [Integer] -> Integer
product [] = 1
product (x:xs) = x * product xs

foldright :: (a -> b -> b)
          -> b
          -> [a]
          -> b
foldright _ z []     = z
foldright f z (x:xs) = f x (foldright f z xs)

sumr' :: [Integer] -> Integer
sumr' = foldright (+) 0

-- foldright (+) 0 [1, 2, 3, 4]
-- 1 + (foldright (+) [2, 3, 4])
-- 1 + 2 + (foldright (+) [3, 4])
-- 1 + 2 + 3 + (foldright (+) [4])
-- 1 + 2 + 3 + 4 + (foldright (+) [])
-- 1 + 2 + 3 + 4 + 0
-- 1 + 2 + 3 + 4
-- 1 + 2 + 3
-- 1 + 2
-- 1

-- (1 + (2 + (3 + (4 + 0))))

product' :: [Integer] -> Integer
product' = foldright (*) 1

suml :: [Integer] -> Integer
suml xs = go xs 0
  where
    go :: [Integer] -> Integer -> Integer
    go [] accum = accum
    go (x:xs) accum = go xs (x + accum)

foldleft :: (b -> a -> b)
         -> b
         -> [a]
         -> b
foldleft f z xs = go xs z
  where go [] accum = accum
        go (y:ys) accum = go ys (f accum y)


-- foldleft (+) 0 [1, 2, 3, 4]
-- go [1, 2, 3, 4] 0
-- go [2, 3, 4] 1
-- go [3, 4] 3
-- go [4] 6
-- go [] 10
-- 10

-- ((((0 + 1) + 2) + 3) + 4)


reverse :: [a] -> [a]
reverse = foldleft (flip (:)) []
-- :t (:)       :: a -> [a] -> [a]
-- :t flip (:)  :: [a] -> a -> [a]
#+END_NOTES

* Error Handling

*** Maybe

~data Maybe a = Nothing | Just a~

#+BEGIN_NOTES
headsafe :: [a] -> Maybe a
headsafe [] = Nothing
headsafe (x:xs) = Just x

foldMaybe :: b -> (a -> b) -> Maybe a -> b
foldMaybe z _ Nothing  = z
foldMaybe _ f (Just a) = f a
#+END_NOTES

*** Either

~data Either a b = Left a | Right b~

#+BEGIN_NOTES
headsafe' :: [a] -> Either String a
headsafe' [] = Left "Can't take head of an empty list"
headsafe' (x:xs) = Right x

foldEither :: (a -> c) -> (b -> c) -> Either a b -> c
foldEither l _ (Left a)  = l a
foldEither _ f (Right b) = f b
#+END_NOTES

* Effects

- Rather than executing the effects, create a data structure that
  defines /how/ to execute the effects.
- At the end of the world, do the dirty work. 
- This is codified in Haskell using the ~IO~ type

*** Live Code
#+ATTR_REVEAL: :frag t
Maybe next time

* Summary
- A program is a referentially transparent expression
  - Provides testability and safety
- Build data structures to transform data
- Interpret data structures using fold, or some derivative
- Run effects at the end of the world

* Resources
- Haskell Programming from First Principles :: http://haskellbook.com
- Functional Programming in Scala :: https://www.manning.com/books/functional-programming-in-scala

* ?
* Thank you
